{"ast":null,"code":"import _objectSpread from \"/Users/james/projects/immersivelabs/hackerthon/app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _taggedTemplateLiteral from \"/Users/james/projects/immersivelabs/hackerthon/app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/james/projects/immersivelabs/hackerthon/app/src/issue/IssueList.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query getIssues($sprintId: ID) {\\n    issues(sprintId: $sprintId) {\\n      title\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nexport const GET_ISSUES = gql(_templateObject());\n\nconst IssuesList = ({\n  filters,\n  withChildren\n}) => {\n  const _useQuery = useQuery(GET_ISSUES, {\n    variables: _objectSpread({}, filters)\n  }),\n        data = _useQuery.data,\n        loading = _useQuery.loading,\n        error = _useQuery.error;\n\n  if (loading) return React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Error: \".concat(error));\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, data.issues.map(issue => React.createElement(\"li\", {\n    key: issue.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, issue.title)));\n};\n\nexport default IssuesList;","map":{"version":3,"sources":["/Users/james/projects/immersivelabs/hackerthon/app/src/issue/IssueList.js"],"names":["React","gql","useQuery","GET_ISSUES","IssuesList","filters","withChildren","variables","data","loading","error","issues","map","issue","id","title"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAO,MAAMC,UAAU,GAAGF,GAAH,mBAAhB;;AAQP,MAAMG,UAAU,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAA+B;AAAA,oBACfJ,QAAQ,CAACC,UAAD,EAAa;AACpDI,IAAAA,SAAS,oBACJF,OADI;AAD2C,GAAb,CADO;AAAA,QACxCG,IADwC,aACxCA,IADwC;AAAA,QAClCC,OADkC,aAClCA,OADkC;AAAA,QACzBC,KADyB,aACzBA,KADyB;;AAOhD,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAeA,KAAf,EAAP;AAEX,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACG,MAAL,CAAYC,GAAZ,CAAgBC,KAAK,IACpB;AAAI,IAAA,GAAG,EAAEA,KAAK,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBD,KAAK,CAACE,KAA1B,CADD,CADH,CADF;AAOD,CAjBD;;AAmBA,eAAeX,UAAf","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nexport const GET_ISSUES = gql`\n  query getIssues($sprintId: ID) {\n    issues(sprintId: $sprintId) {\n      title\n    }\n  }\n`;\n\nconst IssuesList = ({ filters, withChildren }) => {\n  const { data, loading, error } = useQuery(GET_ISSUES, {\n    variables: {\n      ...filters,\n    },\n  });\n\n  if (loading) return <h3>Loading...</h3>;\n  if (error) return <h2>{`Error: ${error}`}</h2>;\n\n  return (\n    <ul>\n      {data.issues.map(issue => (\n        <li key={issue.id}>{issue.title}</li>\n      ))}\n    </ul>\n  );\n};\n\nexport default IssuesList;\n"]},"metadata":{},"sourceType":"module"}